-----------------------------------com.cedarsoft.rest.generator.test.jaxb.FooModel.java-----------------------------------

package com.cedarsoft.rest.generator.test.jaxb;

import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import com.cedarsoft.jaxb.AbstractJaxbCollection;
import com.cedarsoft.jaxb.AbstractJaxbObject;
import com.cedarsoft.jaxb.JaxbStub;

@XmlTransient
@XmlAccessorType(XmlAccessType.FIELD)
public abstract class FooModel
    extends AbstractJaxbObject
{

    public final static String NS = "http://cedarsoft.com/rest/generator/test/foo-model";
    public final static String NS_STUB = (NS + NS_STUB_SUFFIX);
    public final static String NS_COLLECTION = (NS_STUB + NS_COLLECTION_SUFFIX);

    protected FooModel() {
    }

    protected FooModel(String id) {
        super(id);
    }

    @XmlType(name = "fooModels", namespace = FooModel.NS_COLLECTION)
    @XmlRootElement(name = "fooModels", namespace = FooModel.NS_COLLECTION)
    @XmlAccessorType(XmlAccessType.FIELD)
    public static class Collection
        extends AbstractJaxbCollection
    {

        @XmlElementRef
        private List<FooModel.Stub> fooModels;

        public Collection() {
        }

        public Collection(List<FooModel.Stub> fooModels) {
            this(fooModels, 0, 0);
        }

        public Collection(List<FooModel.Stub> fooModels, int startIndex, int maxLength) {
            super(startIndex, maxLength);
            this.fooModels = fooModels;
        }

        public List<FooModel.Stub> getFooModels() {
            return fooModels;
        }

        public void setFooModels(List<FooModel.Stub> fooModels) {
            this.fooModels = fooModels;
        }

    }

    @XmlType(name = "fooModel", namespace = FooModel.NS)
    @XmlRootElement(name = "fooModel", namespace = FooModel.NS)
    @XmlAccessorType(XmlAccessType.FIELD)
    public static class Jaxb
        extends FooModel
    {

        private com.cedarsoft.rest.generator.test.jaxb.BarModel.Jaxb singleBar;
        @XmlElement(name = "theBar")
        private List<com.cedarsoft.rest.generator.test.jaxb.BarModel.Stub> theBars;

        public Jaxb() {
        }

        public Jaxb(String id) {
            super(id);
        }

        public com.cedarsoft.rest.generator.test.jaxb.BarModel.Jaxb getSingleBar() {
            return singleBar;
        }

        public void setSingleBar(com.cedarsoft.rest.generator.test.jaxb.BarModel.Jaxb singleBar) {
            this.singleBar = singleBar;
        }

        public List<com.cedarsoft.rest.generator.test.jaxb.BarModel.Stub> getTheBars() {
            return theBars;
        }

        public void setTheBars(List<com.cedarsoft.rest.generator.test.jaxb.BarModel.Stub> theBars) {
            this.theBars = theBars;
        }

    }

    @XmlType(name = "fooModelStub", namespace = FooModel.NS_STUB)
    @XmlRootElement(name = "fooModel", namespace = FooModel.NS_STUB)
    @XmlAccessorType(XmlAccessType.FIELD)
    public static class Stub
        extends FooModel
        implements JaxbStub<FooModel.Jaxb>
    {

        private com.cedarsoft.rest.generator.test.jaxb.BarModel.Stub singleBar;

        public Stub() {
        }

        public Stub(String id) {
            super(id);
        }

        public com.cedarsoft.rest.generator.test.jaxb.BarModel.Stub getSingleBar() {
            return singleBar;
        }

        public void setSingleBar(com.cedarsoft.rest.generator.test.jaxb.BarModel.Stub singleBar) {
            this.singleBar = singleBar;
        }

        @Override
        public Class<FooModel.Jaxb> getJaxbType() {
            return FooModel.Jaxb.class;
        }

    }

}
-----------------------------------com.cedarsoft.rest.generator.test.jaxb.FooModelMapping.java-----------------------------------

package com.cedarsoft.rest.generator.test.jaxb;

import javax.ws.rs.core.UriBuilder;
import com.cedarsoft.jaxb.JaxbObject;
import com.cedarsoft.rest.JaxbMapping;
import com.cedarsoft.rest.UriContext;
import com.cedarsoft.rest.generator.test.FooModel;

public class FooModelMapping
    extends JaxbMapping<FooModel, com.cedarsoft.rest.generator.test.jaxb.FooModel.Jaxb, com.cedarsoft.rest.generator.test.jaxb.FooModel.Stub>
{

    public final static String PATH = "foomodels";

    public FooModelMapping(BarModelMapping barModelMapping) {
        getDelegatesMapping().addMapping(com.cedarsoft.rest.generator.test.jaxb.BarModel.Jaxb.class, com.cedarsoft.rest.generator.test.jaxb.BarModel.Stub.class, barModelMapping);
    }

    @Override
    protected UriBuilder getUri(JaxbObject object, UriContext context) {
        return context.getBaseUriBuilder().path(PATH).path(object.getId());
    }

    @Override
    protected com.cedarsoft.rest.generator.test.jaxb.FooModel.Jaxb createJaxbObject(FooModel object) {
        return new com.cedarsoft.rest.generator.test.jaxb.FooModel.Jaxb(object.getId());
    }

    @Override
    protected com.cedarsoft.rest.generator.test.jaxb.FooModel.Stub createJaxbStub(FooModel object) {
        return new com.cedarsoft.rest.generator.test.jaxb.FooModel.Stub(object.getId());
    }

    @Override
    protected void copyFieldsToJaxbObject(FooModel source, com.cedarsoft.rest.generator.test.jaxb.FooModel.Jaxb target, UriContext context) {
        target.setId(source.getId());
        target.setSingleBar(get(com.cedarsoft.rest.generator.test.jaxb.BarModel.Jaxb.class, source.getSingleBar(), context));
        target.setTheBars(getStub(com.cedarsoft.rest.generator.test.jaxb.BarModel.Stub.class, source.getTheBars(), context));
    }

    @Override
    protected void copyFieldsToStub(FooModel source, com.cedarsoft.rest.generator.test.jaxb.FooModel.Stub target, UriContext context) {
        target.setId(source.getId());
        target.setSingleBar(getStub(com.cedarsoft.rest.generator.test.jaxb.BarModel.Stub.class, source.getSingleBar(), context));
    }

}
